import time

# returns the exponent of prime p in the prime factorization of n
def nu(p, n):
  if (n % p == 0):
    return 1+nu(p, n // p)
  else:
    return 0

# returns the inverse pair of i, given the inverse pairs of 0 through i-1, inclusive
def nextInversePair(i,m,L, P):
  v = 1
  for j in range(len(P)):
    v *= P[j]**nu(P[j], i)
  if v == 1:
    u = (L[m % i][0]) * ((m - m // i) // (L[m % i][1])) % m
  else:
    u = (L[i // v][0])
  return [u, v]

# returns the inverse pairs of 0 through i, inclusive
def generateInversePairs(i, m, p):
  L = [[0, 0], [1, 1]]
  for j in range(2, i+1):
    L.append(nextInversePair(j, m, L,  p))
  return L

# returns a^n modulo m = product P[i]**E[i]
def ourModExp(a , n , P, E, T):
  t = 1
  phi = 1
  m = 1
  for i in range(len(P)):
    temp = P[i]**(T[i] - 1)
    phi *= temp * (P[i] - 1)
    t *= temp * P[i]
    m *= P[i]**E[i]
  r = n % phi
  q = (n - r) // phi
  c = pow(a, phi, m) - 1
  sum = 0
  choose = 1
  cExp = 1
  ell = 0
  for i in range(len(P)):
    et = E[i] // T[i]
    if ell<et:
      ell = et
  inverses = generateInversePairs(ell, m, P)
  for i in range(min(ell, q + 1)):
    sum = (sum + (choose * cExp)) % m
    cExp = (cExp * c) % m
    choose = (((choose * (q - i)) % m) // inverses[i + 1][1] * inverses[i + 1][0]) % m
  ar = pow(a, r, m)
  return (sum * ar) % m

def times(reps, a , n , P, E, T): #returns [ours, builtin] or [-1, -1] if incorrect computation
    start = time.time()
    for i in range(reps):
        ournum = ourModExp(a, n, P, E, T)
    end = time.time()
    ourtime = end - start
    start = time.time()
    for i in range(reps):
        m=1
        for j in range(len(P)):
          m *= P[j]**E[j]
        builtinnum = pow(a, n, m)
    end = time.time()
    builtintime = end - start
    if builtinnum != ournum:
      return [-1, -1]
    return [ourtime, builtintime]
#39 elements
y = []
r = []
primes
for i in range(5, 39):
  P = [primes[i]]
  T = [1]
  E = [i+1] # log_10 p
  a = 13424
  n = (P[0]**E[0] * 2) // 3
  x = times(40, a, n, P, E, T)
  if x==[-1, -1]:
    print(i)
  y.append(x)
  r.append(x[1]/x[0])
#print(y)
#print(r)


logm = []
for i in range(5, 39):
    logm.append(i*(i+1))

import matplotlib.pyplot as plt

plt.scatter(logm, r, c ="blue", 
             
            s = 50)
 
plt.xlabel("log m")
plt.ylabel("ratio")
plt.show()

